<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Persuing</title>
  
  <subtitle>study &amp; life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Persuingsdu.github.io/"/>
  <updated>2018-02-02T13:32:40.716Z</updated>
  <id>http://Persuingsdu.github.io/</id>
  
  <author>
    <name>Persuing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>引用类型</title>
    <link href="http://Persuingsdu.github.io/2018/01/31/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    <id>http://Persuingsdu.github.io/2018/01/31/引用类型/</id>
    <published>2018-01-31T14:50:30.000Z</published>
    <updated>2018-02-02T13:32:40.716Z</updated>
    
    <content type="html"><![CDATA[<p><strong>引用类型</strong><br>引用类型的值（对象）是引用类型的一个实例。引用类型有时候也被称为对象定义，因为它们描述的是一类对象具有的属性和方法；<br>新对象是使用<code>new</code>操作符和一个<strong>构造函数</strong>来创建。</p><h2 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h2><p>创建Object实例的方法：<br>1.使用<code>new</code>操作符后跟<code>Object</code>构造函数<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">person.name = <span class="string">"Nicholas"</span>;</div><div class="line">person.age = <span class="number">29</span>;</div></pre></td></tr></table></figure></p><p>2.使用<code>对象字面量</code>表示方法<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>:<span class="string">"Nicolas"</span>,<span class="attr">age</span>:<span class="number">29</span>&#125;</div></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> person=&#123;&#125;;<span class="comment">//与new Object()相同</span></div><div class="line">person.name=<span class="string">"Nicholas"</span>;</div><div class="line">person.age=<span class="number">29</span>;</div></pre></td></tr></table></figure><p>开发人员更青睐于使用<code>对象字面量</code>语法，因为语法要求的代码量少，并且有封装数据的感觉，同时，也是向函数传递大量可选参数的首选方式，例如：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayInfo</span>(<span class="params">args</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> output=<span class="string">""</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> args.name==<span class="string">"string"</span>)&#123;</div><div class="line">        output+=<span class="string">"Name:"</span>+args.name+<span class="string">"\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> args.age==<span class="string">"number"</span>)&#123;</div><div class="line">        output+=<span class="string">"Age:"</span>+args.age+<span class="string">"\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(output);</div><div class="line">&#125;</div><div class="line">displayInfo(&#123;<span class="attr">name</span>:<span class="string">"Nicholas"</span>,<span class="attr">age</span>:<span class="number">29</span>&#125;);</div><div class="line">displayInfo(&#123;<span class="attr">name</span>:<span class="string">"Grey"</span>&#125;);</div></pre></td></tr></table></figure></p><h2 id="Array类型"><a href="#Array类型" class="headerlink" title="Array类型"></a>Array类型</h2><p><strong>创建数组的基本方式</strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> colors=<span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"><span class="keyword">var</span> colors=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">20</span>);</div><div class="line"><span class="keyword">var</span> colors=<span class="keyword">new</span> Arry(<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>);</div></pre></td></tr></table></figure></p><p>第二种使用<code>数组字面量表示法</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> colors=[<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];</div><div class="line"><span class="keyword">var</span> names=[];<span class="comment">//创建一个空数组</span></div></pre></td></tr></table></figure></p><p>可以通过索引来访问元素，如果设置某个值的索引超过了该数组的现有项数，数组就会自动添加到该索引的值加1<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> colors=[<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];</div><div class="line">colors[<span class="number">99</span>]=<span class="string">"black"</span>;</div><div class="line">alert(colors.length);<span class="comment">//100</span></div><div class="line"><span class="comment">//数组大小为100，位置3-98实际上是不存在的，所有访问它们，都将返回undefined</span></div></pre></td></tr></table></figure></p><p>另外，可以通过修改数组的<code>length</code>属性，可以从数组的末尾移除项或者向数组中添加新项；<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> colors=[<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];</div><div class="line">colors.length=<span class="number">2</span>;</div><div class="line">alert(colors[<span class="number">2</span>]);<span class="comment">//undefined</span></div></pre></td></tr></table></figure></p><p><strong>检测数组</strong><br><code>if(Array.isArray(value))</code>确定某个对象是不是数组<br><strong>栈方法</strong><br>ECMAScript专门提供了<code>push()</code>和<code>pop()</code>方法，以便实现类似栈的行为。<br><code>push()</code>方法可以接受任意数量的参数，把它们逐个添加到数组末尾，并返回修改后的数组的长度。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> colors=<span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"><span class="keyword">var</span> count=colors.push(<span class="string">"red"</span>,<span class="string">"green"</span>);<span class="comment">//2</span></div></pre></td></tr></table></figure></p><p><code>pop()</code>方法<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> item=colors.pop();<span class="comment">//item="green"</span></div></pre></td></tr></table></figure></p><p><strong>队列方法</strong><br><code>shift()</code>移除数组中的第一项并且返回该项，同时数组的长度减1。<br><code>unshift()</code>可以在数组的前端添加任意个项并返回新数组的长度。<br><strong>重排序方法</strong><br><code>reverse()</code>反转数组项的顺序<br><code>sort()</code>会调用每个数据项的<code>toString()</code>方法，然后比较字符串来排序，即便是数组中的每一项都是数值。<br>利用比较函数排序<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1,value2</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> value1-value2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> values=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>];</div><div class="line">values.sort();<span class="comment">//0,1,10,15,5</span></div><div class="line">values.sort(compare);<span class="comment">//15,10,5,1,0</span></div></pre></td></tr></table></figure></p><p><strong>操作方法</strong><br><code>concat()</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> colors=[<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];</div><div class="line"><span class="keyword">var</span> colors2=colors.concat(<span class="string">"yello"</span>,[<span class="string">"black"</span>,<span class="string">"brown"</span>]);</div></pre></td></tr></table></figure></p><p><code>slice()</code>方法接受一个参数或者两个参数，接受一个参数，返回该位置到数组末尾的所有项。两个参数，返回起始位置和结束位置之间的项，但不包括结束项。<br><code>splice()</code><br><strong>1.删除：</strong>指定两个参数，第一项的位置和要删除的项数。<code>splice(0,2)</code><br><strong>2.插入：</strong>指定三个参数，起始位置，0，要插入的项<code>splice(0,2,&quot;red&quot;,&quot;green&quot;)</code><br><strong>3.替换：</strong>指定三个参数，起始位置，要删除的项数，要插入的任意数量的项。<code>splice(2,1,&quot;red&quot;,&quot;greem)</code><br><strong>位置方法</strong><br><code>indexOf()</code>和<code>lastIndexOf()</code>接受两个参数：要查找的项和（可选的）表示查找起点位置索引。<br><strong>迭代方法</strong><br>每个方法接受2个参数：要在每一项上运行的函数和（可选的）运行该函数的作用域对象。<br>传入这些方法中的函数会接受三个参数：数据项的值，该项在数组中的位置和数组对象本身。<br>1.<code>every()</code>每一项都返回true，返回true。<br>2.<code>filter()</code>返回函数会返回true的项组成的数组。<br>3.<code>forEach()</code>无返回值。<br>4.<code>map()</code>对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。<br>5.<code>some()</code>如果函数的任一项返回true，则返回true。<br><code>every()</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</div><div class="line"><span class="keyword">var</span> everyResult=numbers.every(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span>(item&gt;<span class="number">2</span>);</div><div class="line">&#125;);<span class="comment">//false</span></div><div class="line"><span class="keyword">var</span> someResult=numbers.some(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span>(item&gt;<span class="number">2</span>);</div><div class="line">&#125;);<span class="comment">//true</span></div><div class="line"><span class="keyword">var</span> filterResult=numbers.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span>(item&gt;<span class="number">2</span>);</div><div class="line">&#125;);<span class="comment">//3,4,5,4,3</span></div><div class="line"><span class="keyword">var</span> mapResult=numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> item*<span class="number">2</span>;</div><div class="line">&#125;);<span class="comment">//2,4,6,8,10,8,6,4,2</span></div></pre></td></tr></table></figure></p><p><strong>归并方法</strong><br>两个归并数组的方法<code>reduce()</code>和<code>reduceRight</code>,这两个方法都会迭代数组的所有项，然后构建一个最终的返回值。<br>这两个方法接受两个参数：一个在每一项上调用的函数和（可选的）作为归并基础的初始值。<br>其中函数接受四个参数：前一个值，当前值，项的索引，数组对象。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> value=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> sum=value.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre,cur,index,array</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> pre+cur;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h2 id="Date类型"><a href="#Date类型" class="headerlink" title="Date类型"></a>Date类型</h2><p>创建日期对象<code>var now=new Date();</code></p><h2 id="RegExp类型"><a href="#RegExp类型" class="headerlink" title="RegExp类型"></a>RegExp类型</h2><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="external">!正则表达式</a>，又称<strong>正规表示式</strong>、<strong>正规表示法</strong>、<strong>正规表达式</strong>、<strong>规则表达式</strong>、<strong>常规表示法</strong>（英语：Regular Expression，在代码中常简写为regex、regexp或RE），是计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些匹配某个模式的文本。<img src="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" alt="其它参考"></p></blockquote><h2 id="Function类型"><a href="#Function类型" class="headerlink" title="Function类型"></a>Function类型</h2><p>函数是对象，函数名是指针。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> num1+num2;</div><div class="line">&#125;<span class="comment">//函数声明</span></div><div class="line"><span class="keyword">var</span> sum=<span class="function"><span class="keyword">function</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> num1+num2;</div><div class="line">&#125;;<span class="comment">//函数表达式</span></div></pre></td></tr></table></figure></p><p>一个函数可能有多个名字<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1,num2</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> num1+num2;</div><div class="line">&#125;</div><div class="line">alert(sum(<span class="number">10</span>,<span class="number">10</span>);<span class="comment">//20</span></div><div class="line"><span class="keyword">var</span> anotherSum=sum;</div><div class="line">sum=<span class="literal">null</span>;</div><div class="line">alert(anotherSum(<span class="number">10</span>,<span class="number">10</span>));<span class="comment">//20</span></div></pre></td></tr></table></figure></p><p><strong>没有重载</strong><br><strong>作为值的函数</strong><br>将一个函数像传递参数一样传递给另一个函数。<br>也可以作为一个函数的结果返回：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createComparisonFunction</span>(<span class="params">propertyName</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">object1,object2</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> value1=object1[propertyName];</div><div class="line">        <span class="keyword">var</span> value2=object2[propertyName];</div><div class="line">        <span class="keyword">if</span>(value1&gt;value2)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(value1&lt;value2)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> data=[&#123;<span class="attr">name</span>:<span class="string">"Zachary"</span>,<span class="attr">age</span>:<span class="number">28</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">"Nicholas"</span>,<span class="attr">age</span>:<span class="number">29</span>&#125;];</div><div class="line">data.sort(createComparisonFunction(<span class="string">"name"</span>));<span class="comment">//data[0].name=Nicholas</span></div><div class="line">data.sort(createComparisonFunction(<span class="string">"age"</span>));<span class="comment">//data[0].name=Zachary</span></div></pre></td></tr></table></figure></p><p><strong>函数属性和方法</strong><br><code>apply()</code>和<code>call()</code>用途为在特定的作用域中调用函数，实际上等于设置函数体内this对象的值。<br><code>apply()</code>接受两个参数：1.运行函数的作用域 2.参数数组（可以是<code>Array</code>实例或者是<code>argument</code>对象）<br><code>call()</code>传递给函数的参数必须逐个列举出来。<br>事实上，它们真正强大的地方在于扩充函数赖以运行的作用域。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">window</span>.color=<span class="string">"red"</span>;</div><div class="line"><span class="keyword">var</span> o=&#123;<span class="attr">color</span>:<span class="string">"blue"</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.color);</div><div class="line">&#125;</div><div class="line">sayColor.call(<span class="keyword">this</span>);<span class="comment">//red</span></div><div class="line">sayColor.call(o);<span class="comment">//blue</span></div><div class="line">sayColor.call(<span class="built_in">window</span>);<span class="comment">//red</span></div></pre></td></tr></table></figure></p><h2 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h2><p>为了便于操作基本类型值，ECMAScript还提供了三个特殊的引用类型<code>Boolean</code>，<code>Number</code>,<code>String</code>。<br>引用类型和基本包装类型的主要区别就是对象的生存周期。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> s1=<span class="string">"some text"</span>;</div><div class="line">s1.color=<span class="string">"red"</span>;</div><div class="line">alert(s1.color);<span class="comment">//undefined</span></div></pre></td></tr></table></figure></p><p><strong>String类型</strong><br>创建String对象<code>var stringObject=new String(&quot;hello world&quot;);</code><br>1.字符方法<br><code>charAt()</code>,<code>charCodeAt()</code><br>2.字符串操作方法<br><code>concat()</code>(实践中更多使用+)<br><code>slice()</code>和<code>substring()</code>根据<code>start</code>和<code>end</code>的值，截取子串，只有一个参数，默认<code>end</code>为结尾。<br><code>substr()</code>根据<code>start</code>和<code>numbers</code>的值，截取字串，只有一个参数，默认截取到字符串尾部。<br>3.字符串位置方法<br><code>indexOf()</code>和<code>lastIndexOf()</code>,接受一个参数，表示起始搜索点。<br>4.<code>trim()</code>方法<br>删除前置和后缀的所有空格。<br>5.字符串大小写转换方法<br><code>toLowerCase()</code>和<code>toUpperCase()</code><br>6.字符串模式匹配<br><code>match()</code>接受一个参数：要么是一个正则表达式，要么是一个RegExp对象。<br><code>search()</code>唯一的参数与<code>match()</code>相同，返回字符串中第一个匹配项的索引。<br><code>replace()</code>第一个参数可以是字符串或者是一个RegExp对象，第二个参数可以是一个字符串或者一个函数。<br><code>split()</code>基于指定的分隔符将一个字符串分割成多个字串，并将结果放在一个数组中。<br>7.<code>localCompare()</code>方法<br>这个方法比较两个字符串。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> stringValue=<span class="string">"yellow"</span>;</div><div class="line">consloe.log(stringValue.localeCompare(<span class="string">"brick"</span>));<span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(stringValue.localeCompare(<span class="string">"yellow"</span>));<span class="comment">//0</span></div><div class="line"><span class="built_in">console</span>.log(stringValue.localeCompare(<span class="string">"zoo"</span>));<span class="comment">//-1</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;引用类型&lt;/strong&gt;&lt;br&gt;引用类型的值（对象）是引用类型的一个实例。引用类型有时候也被称为对象定义，因为它们描述的是一类对象具有的属性和方法；&lt;br&gt;新对象是使用&lt;code&gt;new&lt;/code&gt;操作符和一个&lt;strong&gt;构造函数&lt;/strong&gt;来
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://Persuingsdu.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://Persuingsdu.github.io/2018/01/26/%E9%9A%8F%E7%AC%94%E2%80%9D/"/>
    <id>http://Persuingsdu.github.io/2018/01/26/随笔”/</id>
    <published>2018-01-26T15:53:23.000Z</published>
    <updated>2018-01-26T16:24:06.970Z</updated>
    
    <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=493911&auto=0&height=66"></iframe><br>我住的城市从不下雪<br>记忆却堆满冷的感觉<br>思念的旺季<br>霓虹扫过喧哗的街<br>把快乐赶得好远<br>落单的恋人最怕过节<br>只能独自庆祝尽量喝醉<br>我爱过的人<br>没有一个留在身边<br>寂寞它陪我过夜<br>Merry merry christmas<br>Lonely lonely christmas<br>想祝福不知该给谁<br>爱被我们打了死结<br>Lonely lonely christmas<br>Merry merry christmas<br>写了卡片能寄给谁<br>心碎的像街上的纸屑<br>落单的恋人最怕过节<br>只能独自庆祝尽量喝醉<br>我爱过的人<br>没有一个留在身边<br>寂寞它陪我过夜<br>Merry merry christmas<br>Lonely lonely christmas<br>想祝福不知该给谁<br>爱被我们打了死结<br>Lonely lonely christmas<br>Merry merry christmas<br>写了卡片能寄给谁<br>心碎的像街上的纸屑<br>电话不接不要被人发现<br>我整夜都关在房间<br>狂欢的笑声<br>听来像哀悼的音乐<br>眼眶的泪 温热冻结<br>望着电视里的无聊节目<br>躺在沙发上<br>变成没知觉的植物<br>Merry merry christmas<br>Lonely lonely christmas<br>想祝福不知该给谁<br>爱被我们打了死结<br>Lonely lonely christmas<br>Merry merry christmas<br>写了卡片能寄给谁<br>心碎的像街上的纸屑<br>Merry christmas<br>Merry merry christmas<br>Lonely lonely christmas<br>想祝福不知该给谁<br>爱被我们打了死结<br>Lonely lonely christmas<br>Merry merry christmas<br>写了卡片能寄给谁<br>心碎的像街上的纸屑<br>谁来陪我过这圣诞节</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Trie</title>
    <link href="http://Persuingsdu.github.io/2017/12/24/Trie/"/>
    <id>http://Persuingsdu.github.io/2017/12/24/Trie/</id>
    <published>2017-12-24T07:12:34.000Z</published>
    <updated>2017-12-29T09:01:48.036Z</updated>
    
    <content type="html"><![CDATA[<p><strong>字典樹</strong><br><a id="more"></a><br>學習了一下字典樹的簡單實現方式<br><a href="http://blog.csdn.net/sunnyyoona/article/details/43900425" target="_blank" rel="external">Reference</a><br><strong>节点的定义</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxn 26</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trieNode</span> &#123;</span></div><div class="line"><span class="keyword">int</span> count;<span class="comment">//以该节点为结尾的单词的个数</span></div><div class="line">trieNode* next[Maxn];</div><div class="line">trieNode(<span class="keyword">int</span> x) &#123;</div><div class="line">count = x;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Maxn; i++)</div><div class="line">next[i] = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p><strong>在字典中插入新的字符串</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(trieNode* &amp;root, <span class="built_in">string</span> str)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> size = str.size();</div><div class="line"><span class="keyword">int</span> index;</div><div class="line">trieNode* p = root;<span class="comment">//根节点</span></div><div class="line"><span class="comment">//一个一个字符插入</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">index = str[i] - <span class="string">'a'</span>;<span class="comment">//26个字母中的位置</span></div><div class="line"><span class="keyword">if</span> (p-&gt;next[index]==<span class="literal">NULL</span>) </div><div class="line">p-&gt;next[index] = <span class="keyword">new</span> trieNode(<span class="number">0</span>);<span class="comment">//创建</span></div><div class="line">p = p-&gt;next[index];</div><div class="line">&#125;</div><div class="line"><span class="comment">//以该字符为结尾的单词</span></div><div class="line">p-&gt;count++;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>刪除字典中的元素</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(trieNode* &amp;root, <span class="built_in">string</span> str)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> size = str.size();</div><div class="line"><span class="keyword">int</span> index;</div><div class="line">trieNode* p = root;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">index = str[i] - <span class="string">'a'</span>;</div><div class="line"><span class="keyword">if</span> (p-&gt;next[index] == <span class="literal">NULL</span>)</div><div class="line"><span class="keyword">return</span>;</div><div class="line">p = p-&gt;next[index];</div><div class="line">&#125;</div><div class="line">p-&gt;count--;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>查找字典中是否存在某個字符串</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">search</span><span class="params">(trieNode* root, <span class="built_in">string</span> str)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> size = str.size();</div><div class="line">trieNode *p = root;</div><div class="line"><span class="keyword">int</span> index;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">index = str[i] - <span class="string">'a'</span>;</div><div class="line"><span class="comment">// 无法转移到下一个字符</span></div><div class="line"><span class="keyword">if</span> (p-&gt;next[index] == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;<span class="comment">//if</span></div><div class="line"> <span class="comment">// 继续下一个字符</span></div><div class="line">p = p-&gt;next[index];</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> p-&gt;count &gt; <span class="number">0</span>;<span class="comment">//是否有</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>遍曆輸出整個字典</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="comment">//利用递归程序查询整个字典</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDic</span><span class="params">(trieNode* root, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt; &amp;words, <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &amp;word)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (root-&gt;count &gt; <span class="number">0</span>) &#123;</div><div class="line">words.push_back(word);</div><div class="line">&#125;<span class="comment">//到了根且有值</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) &#123;</div><div class="line"><span class="keyword">if</span> (root-&gt;next[i]) &#123;<span class="comment">//26个循环</span></div><div class="line">word.push_back(<span class="string">'a'</span> + i);</div><div class="line">printDic(root-&gt;next[i], words, word);</div><div class="line">word.pop_back();<span class="comment">//回溯</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>LeetCode上的相關題目</strong><br><a href="https://leetcode.com/problems/map-sum-pairs/description/" target="_blank" rel="external">一.題目鏈接</a><br>使用字典樹的解法<br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxn 26</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></div><div class="line"><span class="keyword">int</span> count;</div><div class="line"><span class="keyword">int</span> value;</div><div class="line">node* next[Maxn];</div><div class="line">node(<span class="keyword">int</span> x) &#123;</div><div class="line">count = x;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Maxn; i++)</div><div class="line">next[i] = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapSum</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/** Initialize your data structure here. */</span></div><div class="line">    MapSum() &#123;</div><div class="line">root = <span class="keyword">new</span> node(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> key, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> size = key.size();</div><div class="line"><span class="keyword">int</span> index;</div><div class="line">node* p = root;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">index = key[i] - <span class="string">'a'</span>;</div><div class="line"><span class="keyword">if</span> (p-&gt;next[index] == <span class="literal">NULL</span>)</div><div class="line">p-&gt;next[index] = <span class="keyword">new</span> node(<span class="number">0</span>);</div><div class="line">p = p-&gt;next[index];</div><div class="line">&#125;</div><div class="line">p-&gt;count++;</div><div class="line">p-&gt;value = val;</div><div class="line">&#125;</div><div class="line"><span class="function">node* <span class="title">help</span><span class="params">(<span class="built_in">string</span> prefix)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> size = prefix.size();</div><div class="line"><span class="keyword">int</span> index;</div><div class="line">node* p = root;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">index = prefix[i] - <span class="string">'a'</span>;</div><div class="line"><span class="keyword">if</span> (p-&gt;next[index] == <span class="literal">NULL</span>)</div><div class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">p = p-&gt;next[index];</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> p;<span class="comment">//有该前缀</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(node* root,<span class="keyword">int</span>&amp; res)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)<span class="comment">//空</span></div><div class="line"><span class="keyword">return</span>;</div><div class="line"><span class="keyword">if</span> (root-&gt;count &gt; <span class="number">0</span>)</div><div class="line">res += root-&gt;value;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Maxn; i++)</div><div class="line"><span class="keyword">if</span> (root-&gt;next[i])</div><div class="line">search(root-&gt;next[i], res);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="built_in">string</span> prefix)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">node* current = help(prefix);</div><div class="line">search(current,res);</div><div class="line"><span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">node* root;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p><a href="https://leetcode.com/problems/replace-words/description/" target="_blank" rel="external">二.題目鏈接</a><br><img src="/img/leetcode.png" alt="Runtime"><br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 26</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></div><div class="line"><span class="keyword">int</span> count;</div><div class="line">node* next[maxn];</div><div class="line">node(<span class="keyword">int</span> x) &#123;</div><div class="line">count = x;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i++)</div><div class="line">next[i] = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node* root,<span class="built_in">string</span> str)</span></span>&#123;</div><div class="line"><span class="keyword">int</span> size = str.size();</div><div class="line"><span class="keyword">int</span> index;</div><div class="line">node* p = root;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">index = str[i] - <span class="string">'a'</span>;</div><div class="line"><span class="keyword">if</span> (p-&gt;next[index] == <span class="literal">NULL</span>)</div><div class="line">p-&gt;next[index] = <span class="keyword">new</span> node(<span class="number">0</span>);</div><div class="line">p = p-&gt;next[index];</div><div class="line">&#125;</div><div class="line">p-&gt;count++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(node* &amp;root, <span class="keyword">char</span> c)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> index = c - <span class="string">'a'</span>;</div><div class="line"><span class="keyword">if</span> (root-&gt;next[index] == <span class="literal">NULL</span>)</div><div class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//不存在</span></div><div class="line">root = root-&gt;next[index];</div><div class="line"><span class="keyword">if</span> (root-&gt;count &gt; <span class="number">0</span>)</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//存在</span></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//可能存在</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">replaceWords</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; dict, <span class="built_in">string</span> sentence)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> size = dict.size();</div><div class="line">node* root = <span class="keyword">new</span> node(<span class="number">0</span>);</div><div class="line"><span class="built_in">string</span> res = <span class="string">""</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">insert(root, dict[i]);</div><div class="line"><span class="keyword">int</span> keysize = sentence.size();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; keysize; ) &#123;</div><div class="line">node* p = root;</div><div class="line"><span class="built_in">string</span> element = <span class="string">""</span>;</div><div class="line"><span class="keyword">bool</span> tag = <span class="literal">false</span>;</div><div class="line"><span class="keyword">while</span> (j &lt; keysize &amp;&amp; sentence[j] != <span class="string">' '</span>) &#123;</div><div class="line">element += sentence[j];</div><div class="line"><span class="keyword">int</span> com = search(p, sentence[j]);</div><div class="line"><span class="keyword">if</span> (com==<span class="number">-1</span>) &#123;</div><div class="line">j++;</div><div class="line"><span class="keyword">while</span> (j&lt;keysize &amp;&amp; sentence[j] != <span class="string">' '</span>) &#123;</div><div class="line">element += sentence[j];</div><div class="line">j++;</div><div class="line">&#125;</div><div class="line">res += element;</div><div class="line">res += <span class="string">" "</span>;</div><div class="line">tag = <span class="literal">true</span>;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (com == <span class="number">0</span>) &#123;</div><div class="line"><span class="comment">//do noing</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (com == <span class="number">1</span>) &#123;</div><div class="line">res += element;</div><div class="line">res += <span class="string">" "</span>;</div><div class="line">tag = <span class="literal">true</span>;</div><div class="line"><span class="keyword">while</span> (j&lt;keysize &amp;&amp; sentence[j] != <span class="string">' '</span>)</div><div class="line">j++;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">j++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (!tag) &#123;</div><div class="line">res += element;</div><div class="line">res += <span class="string">" "</span>;</div><div class="line">&#125;</div><div class="line">j++;</div><div class="line">&#125;</div><div class="line">res.pop_back();</div><div class="line"><span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;字典樹&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://Persuingsdu.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://Persuingsdu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
